
IETF draft-tcp-over-udp-01.htm,7901
    function addHeaderTags() {addHeaderTags105,3707
    function showElem(id) {showElem118,5382
    function hideElem(id) {hideElem123,5553
</pre><pre class="newpage"><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>page-2192,10707
</pre><pre class="newpage"><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>page-3248,15587
</pre><pre class="newpage"><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>page-4304,16088
<span class="h2"><a name="section-1">1</a>.  Introduction</span>section-1308,16288
</pre><pre class="newpage"><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>page-5360,20136
<span class="h3"><a name="section-1.1">1.1</a>.  Conventions</span>section-1.1368,20705
<span class="h3"><a name="section-1.2">1.2</a>.  Terminology</span>section-1.2374,21169
<span class="h2"><a name="section-2">2</a>.  Model of Operation</span>section-2382,21577
<span class="h3"><a name="section-2.1">2.1</a>.  Setup and tear down</span>section-2.1388,21816
<span class="h3"><a name="section-2.2">2.2</a>.  Connection tracking</span>section-2.2393,22043
<span class="h3"><a name="section-2.3">2.3</a>.  MTU discovery</span>section-2.3400,22403
</pre><pre class="newpage"><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>page-6416,23275
<span class="h2"><a name="section-3">3</a>.  Congestion Control, Flow Control, and Reliability</span>section-3425,23642
<span class="h3"><a name="section-3.1">3.1</a>.  Explicit Congestion Notification (ECN)</span>section-3.1449,25667
<span class="h2"><a name="section-4">4</a>.  Header Format</span>section-4463,26588
</pre><pre class="newpage"><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>page-7472,27081
</pre><pre class="newpage"><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>page-8528,30414
<span class="h2"><a name="section-5">5</a>.  NAT related issues</span>section-5576,32391
</pre><pre class="newpage"><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>page-9584,32712
<span class="h3"><a name="section-5.1">5.1</a>.  Using ToU</span>section-5.1588,32912
<span class="h3"><a name="section-5.2">5.2</a>.  NAT bindings</span>section-5.2600,33886
<span class="h2"><a name="section-6">6</a>.  ToU, TLS, and DTLS</span>section-6619,35056
</pre><pre class="newpage"><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>page-10640,36365
<span class="h2"><a name="section-7">7</a>.  Implementation Guidelines</span>section-7659,37005
<span class="h2"><a name="section-8">8</a>.  Design Alternatives</span>section-8671,37638
<span class="h3"><a name="section-8.1">8.1</a>.  Changing IP protocol number</span>section-8.1678,37980
</pre><pre class="newpage"><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>page-11696,39025
<span class="h3"><a name="section-8.2">8.2</a>.  Simplified TCP</span>section-8.2703,39357
<span class="h3"><a name="section-8.3">8.3</a>.  TCP-like mechanism within an application layer protocol</span>section-8.3718,40263
<span class="h3"><a name="section-8.4">8.4</a>.  Tunneling</span>section-8.4733,41227
</pre><pre class="newpage"><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>page-12752,42225
<span class="h3"><a name="section-8.5">8.5</a>.  TFRC</span>section-8.5762,42782
<span class="h3"><a name="section-8.6">8.6</a>.  SCTP</span>section-8.6777,43774
<span class="h3"><a name="section-8.7">8.7</a>.  Criticism</span>section-8.7787,44428
</pre><pre class="newpage"><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>page-13808,45488
<span class="h2"><a name="section-9">9</a>.  Acknowledgements</span>section-9812,45691
<span class="h2"><a name="section-10">10</a>.  IANA Considerations</span>section-10819,45943
<span class="h2"><a name="section-11">11</a>.  Security Considerations</span>section-11824,46033
<span class="h2"><a name="section-12">12</a>.  References</span>section-12829,46181
<span class="h3"><a name="section-12.1">12.1</a>.  Normative References</span>section-12.1831,46249
   [<a name="ref-I-D.ietf-tcpm-rfc2581bis" id="ref-I-D.ietf-tcpm-rfc2581bis">I-D.ietf-tcpm-rfc2581bis</a>]ref-I-D.ietf-tcpm-rfc2581bis833,46331
   [<a name="ref-I-D.ietf-tcpm-tcp-auth-opt" id="ref-I-D.ietf-tcpm-tcp-auth-opt">I-D.ietf-tcpm-tcp-auth-opt</a>]ref-I-D.ietf-tcpm-tcp-auth-opt838,46683
   [<a name="ref-RFC0793" id="ref-RFC0793">RFC0793</a>]  Postel, J., "Transmission Control Protocol", STD 7,ref-RFC0793843,47052
   [<a name="ref-RFC0854" id="ref-RFC0854">RFC0854</a>]  Postel, J. and J. Reynolds, "Telnet Protocolref-RFC0854846,47252
   [<a name="ref-RFC1122" id="ref-RFC1122">RFC1122</a>]  Braden, R., "Requirements for Internet Hosts -ref-RFC1122849,47462
   [<a name="ref-RFC1323" id="ref-RFC1323">RFC1323</a>]  Jacobson, V., Braden, B., and D. Borman, "TCP Extensionsref-RFC1323852,47687
   [<a name="ref-RFC2018" id="ref-RFC2018">RFC2018</a>]  Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, "TCPref-RFC2018855,47911
   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicateref-RFC2119858,48151
</pre><pre class="newpage"><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>page-14864,48533
   [<a name="ref-RFC3168" id="ref-RFC3168">RFC3168</a>]  Ramakrishnan, K., Floyd, S., and D. Black, "The Additionref-RFC3168868,48736
   [<a name="ref-RFC3390" id="ref-RFC3390">RFC3390</a>]  Allman, M., Floyd, S., and C. Partridge, "Increasing TCP'sref-RFC3390872,49008
   [<a name="ref-RFC4347" id="ref-RFC4347">RFC4347</a>]  Rescorla, E. and N. Modadugu, "Datagram Transport Layerref-RFC4347875,49232
   [<a name="ref-RFC4821" id="ref-RFC4821">RFC4821</a>]  Mathis, M. and J. Heffner, "Packetization Layer Path MTUref-RFC4821878,49445
   [<a name="ref-RFC4960" id="ref-RFC4960">RFC4960</a>]  Stewart, R., "Stream Control Transmission Protocol",ref-RFC4960881,49660
   [<a name="ref-RFC5246" id="ref-RFC5246">RFC5246</a>]  Dierks, T. and E. Rescorla, "The Transport Layer Securityref-RFC5246884,49863
   [<a name="ref-RFC5348" id="ref-RFC5348">RFC5348</a>]  Floyd, S., Handley, M., Padhye, J., and J. Widmer, "TCPref-RFC5348887,50097
   [<a name="ref-RFC5389" id="ref-RFC5389">RFC5389</a>]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,ref-RFC5389891,50373
<span class="h3"><a name="section-12.2">12.2</a>.  Informative References</span>section-12.2895,50634
   [<a name="ref-Daytona" id="ref-Daytona">Daytona</a>]  Pradhan, P., Kandula, S., Xu, W., Sheikh, A., and E.ref-Daytona897,50718
   [<a name="ref-I-D.ietf-behave-nat-behavior-discovery" id="ref-I-D.ietf-behave-nat-behavior-discovery">I-D.ietf-behave-nat-behavior-discovery</a>]ref-I-D.ietf-behave-nat-behavior-discovery901,51033
   [<a name="ref-I-D.ietf-mmusic-ice" id="ref-I-D.ietf-mmusic-ice">I-D.ietf-mmusic-ice</a>]ref-I-D.ietf-mmusic-ice906,51459
   [<a name="ref-I-D.ietf-mmusic-ice-tcp" id="ref-I-D.ietf-mmusic-ice-tcp">I-D.ietf-mmusic-ice-tcp</a>]ref-I-D.ietf-mmusic-ice-tcp912,51889
</pre><pre class="newpage"><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>page-15920,52351
   [<a name="ref-MINET" id="ref-MINET">MINET</a>]    Dinda, P., "The Minet TCP/IP Stack", 2002, &lt;<a href="http://cs.northwestern.edu/%7Epdinda/minet/NWU-CS-02-08.pdf">http://</a>ref-MINET926,52582
   [<a name="ref-atou" id="ref-atou">atou</a>]     Dunigan, T. and F. Fowler, "A TCP-over-UDP Test Harness",ref-atou929,52912
<span class="h2"><a name="appendix-A">Appendix A</a>.  Change Log</span>appendix-A933,53154
<span class="h1"><a name="appendix-A.1">A.1</a>.  Changes since <a href="http://tools.ietf.org/html/draft-baset-tsvwg-tcp-over-udp-00">draft-baset-tsvwg-tcp-over-udp-00</a></span>appendix-A.1935,53230

scoreboard.h,1708
#define SBSIZE SBSIZE3,56
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;length_5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;first_5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;HighAck5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;Pipe5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;loss3s5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;NextLoss5,77
int retran_seqno=0, cumacks=0, goodacks=0, dup_acks=0;retran_seqno6,143
int retran_seqno=0, cumacks=0, goodacks=0, dup_acks=0;cumacks6,143
int retran_seqno=0, cumacks=0, goodacks=0, dup_acks=0;goodacks6,143
int retran_seqno=0, cumacks=0, goodacks=0, dup_acks=0;dup_acks6,143
int dup_total=0;int SACKed=0, ACKed=0;dup_total7,198
int dup_total=0;int SACKed=0, ACKed=0;SACKed7,198
int dup_total=0;int SACKed=0, ACKed=0;ACKed7,198
int FastRecovery=0;FastRecovery8,237
double wintrim = 0.0, winmult = 0.5;wintrim10,258
double wintrim = 0.0, winmult = 0.5;winmult10,258
int retran_data = 0, awnd = 0;retran_data11,295
int retran_data = 0, awnd = 0;awnd11,295
int IsEmpty () {return (length_ == 0);}IsEmpty13,327
struct ScoreBoardNode {ScoreBoardNode21,518
	int seq_no_;		/* Packet number */seq_no_22,542
	int ack_flag_;		/* Acked by cumulative ACK */ack_flag_23,577
	int sack_flag_;		/* Acked by SACK block */sack_flag_24,624
	int retran_;		/* Packet retransmitted */retran_25,668
	int snd_nxt_;		/* snd_nxt at time of retransmission */snd_nxt_26,710
	int sack_cnt_;		/* number of reports for this hole */sack_cnt_27,766
	} SBN[SBSIZE+1];SBN28,821
#define SBNI SBNI30,840

atousrv.c,3583
char *RCSid = "$Header: /home/thistle/dunigan/src/atou/atousrv.c,v 1.8 2002/06/20 14:28:46 dunigan Exp dunigan $";RCSid28,965
char *version = "$Revision: 1.8 $";version29,1080
#define PORT PORT30,1116
#define BUFFSIZE BUFFSIZE31,1134
double dbuff[BUFFSIZE/8];dbuff32,1164
char *buff = (char *)dbuff;buff33,1190
int sockfd, rcvspace;sockfd34,1218
int sockfd, rcvspace;rcvspace34,1218
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;inlth35,1240
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;sackcnt35,1240
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;pkts35,1240
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;dups35,1240
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;drops35,1240
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;hi35,1240
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;maxooo35,1240
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;debug36,1287
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;expect36,1287
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;expected36,1287
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;acks36,1287
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;acktimeouts36,1287
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;sendack36,1287
#define MAXHO MAXHO38,1424
int  hocnt, holes[MAXHO];hocnt39,1443
int  hocnt, holes[MAXHO];holes39,1443
int sack=0, clilen; sack41,1501
int sack=0, clilen; clilen41,1501
struct sockaddr_in	cli_addr;cli_addr42,1522
int ackdelay=0 /* usual is 200 ms */, ackheadr, sackinfo;ackdelay43,1551
int ackdelay=0 /* usual is 200 ms */, ackheadr, sackinfo;ackheadr43,1551
int ackdelay=0 /* usual is 200 ms */, ackheadr, sackinfo;sackinfo43,1551
int  settime=0;settime44,1609
int start[3], endd[3];start45,1625
int start[3], endd[3];endd45,1625
double et,minrtt=999999., maxrtt=0, avrgrtt;et48,1675
double et,minrtt=999999., maxrtt=0, avrgrtt;minrtt48,1675
double et,minrtt=999999., maxrtt=0, avrgrtt;maxrtt48,1675
double et,minrtt=999999., maxrtt=0, avrgrtt;avrgrtt48,1675
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;rto49,1720
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;delta49,1720
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;srtt49,1720
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;rttvar49,1720
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;h49,1720
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;g49,1720
double due,rcvt,st,et,secs();due50,1777
double due,rcvt,st,et,secs();rcvt50,1777
double due,rcvt,st,et,secs();st50,1777
double due,rcvt,st,et,secs();et50,1777
unsigned int millisecs(), rtt_base=0;rtt_base51,1807
struct Pr_Msg {Pr_Msg53,1846
	double tstamp;tstamp54,1862
	unsigned int msgno;  /* msgno or ackno */msgno55,1878
	unsigned int blkcnt;blkcnt56,1921
	struct Sblks {Sblks57,1943
		unsigned int sblk,eblk;sblk58,1959
		unsigned int sblk,eblk;eblk58,1959
	} sblks[3];sblks59,1985
} *msg, ack;msg60,1998
} *msg, ack;ack60,1998
unsigned int tempno;tempno62,2012
void ctrlc(void){ctrlc64,2034
void usage(void) {usage78,2520
int main(int argc, char** argv){main88,2847
err_sys(s)err_sys180,5520
void bldack()bldack187,5595
int check_order(int newpkt) {check_order265,7581
addho( n)addho278,7805
fixho(n)fixho294,8133
secs()secs310,8389
millisecs()millisecs323,8651
void vntohl(int *p, int cnt){vntohl336,9018
void vhtonl(int *p, int cnt){vhtonl342,9149
int acktimer(int fd, int t) {acktimer348,9283

mktar,0

Makefile,555
CXX := gccCXX1,0
CFLAGS := -g -WallCFLAGS2,11
TARGETS := atoucli \TARGETS3,30
SRCS := $(TARGETS:%=%.c)SRCS6,61
OBJS := $(TARGETS:%=%.o)OBJS8,87
TEST_SRCS := \TEST_SRCS10,113
TEST_OBJS := $(TEST_SRCS:.c=.o) $(filter-out main.o,$(OBJS))TEST_OBJS15,228
TEST_OBJS := $(TEST_OBJS:.o=.test.o)TEST_OBJS18,386
GTEST_DIR = gtestGTEST_DIR21,491
NEWMODE := modeNEWMODE24,590
	CFLAGS := -DDEBUG -O0 $(CFLAGS)CFLAGS29,759
	CFLAGS := -O3 -ffast-math -DNDEBUG $(CFLAGS)CFLAGS32,815
OLDMODE := $(shell cat .buildmode 2> /dev/null)OLDMODE38,1052

atoucli.c,7891
char *RCSid = "$Header: /home/wisp/dunigan/src/atou/atoucli.c,v 1.38 2003/01/16 19:07:57 dunigan Exp dunigan $";RCSid45,1497
char *version = "$Revision: 1.38 $";version46,1610
FILE *db;     /* debug trace file */db48,1648
int droplist[11];  /* debuggin */droplist51,1717
int debug;debug52,1751
char *host;host53,1762
#define PORT PORT54,1774
int port=PORT;			/* udp port */port55,1792
int sndbuf = 32768;		/* udp send buff, bigger than mss */sndbuf56,1824
int rcvbuf = 32768;		/* udp recv buff for ACKs*/rcvbuf57,1882
int mss=1472;			/* user payload, can be > MTU for UDP */mss58,1931
double tick = 1.0;		/* recvfrom timeout -- select */tick59,1988
double timeout=0.5;		/* pkt timeout */timeout60,2041
int idle=0;                     /* successive timeouts */idle61,2080
int maxidle=10;                 /* max idle before abort */maxidle62,2138
int maxpkts=0;			/* test duration */maxpkts63,2198
int maxtime=10;                 /* test duration */maxtime64,2235
int burst_limit = 0;		/* most to send at once --- weak */burst_limit65,2287
int rcvrwin = 20;		/* rcvr window in mss-segments */rcvrwin66,2345
int dup_thresh =3;		/* dup ACKs causing retransmit */dup_thresh67,2398
int increment = 1;   		/* cc increment */increment68,2452
double multiplier = 0.5;	/* cc backoff */multiplier69,2494
double kai = 0.;		/* Kelly scalable TCP cwnd += kai */kai70,2536
int ssincr =1;			/* slow start increment */ssincr71,2591
double thresh_init = 1.0;      /* fraction of rvcvwind for initial ssthresh*/thresh_init72,2635
int max_ssthresh =0;            /* floyd modified slow start, ? consider frac */max_ssthresh73,2713
int initsegs = 2;		/* slowstart initial */initsegs74,2794
int newreno = 1;		/* newreno flag */newreno75,2837
int sack = 0;			/* sack flag */sack76,2874
int delack = 0;			/* delack flag */delack77,2906
int rampdown = 0;		/* enable wintrim */rampdown78,2942
int fack = 0;			/* fack flag */fack79,2982
int floyd = 0;			/* Sally Floyd's aimd changes */floyd80,3014
int vegas=0;                    /* vegas flag 0:off 1:last RTT  2:min rtt  */vegas81,3064
int vss = 0;                    /* vegas slow start  0:exit ss  1: go to floyd*/vss83,3220
double valpha=1.0, vbeta=3.0, vgamma=1.0;  /* vegas parameters */valpha84,3301
double valpha=1.0, vbeta=3.0, vgamma=1.0;  /* vegas parameters */vbeta84,3301
double valpha=1.0, vbeta=3.0, vgamma=1.0;  /* vegas parameters */vgamma84,3301
int vinss=0;   /* in vegas slow start */vinss87,3398
int vsscnt=0;  /* number of vegas slow start adjusts */vsscnt88,3439
int vcnt;  /* number of rtt samples */vcnt89,3495
int vdecr, v0 ; /* vegas decrements or no adjusts */vdecr90,3534
int vdecr, v0 ; /* vegas decrements or no adjusts */v090,3534
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vdelta91,3587
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vrtt91,3587
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vrttsum91,3587
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vrttmax91,3587
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vrttmin91,3587
int initial_ss =1;   /* initial slow start */initial_ss93,3641
unsigned int bwe_pkt, bwe_prev, bwe_on=1;bwe_pkt96,3689
unsigned int bwe_pkt, bwe_prev, bwe_on=1;bwe_prev96,3689
unsigned int bwe_pkt, bwe_prev, bwe_on=1;bwe_on96,3689
double bwertt, bwertt_max;bwertt97,3731
double bwertt, bwertt_max;bwertt_max97,3731
double max_delta;  /* vegas like tracker */max_delta98,3758
#define BUFFSIZE BUFFSIZE100,3803
double dbuff[BUFFSIZE/8];dbuff101,3833
int *buff = (int *)dbuff;buff102,3859
struct Pr_Msg {Pr_Msg104,3886
        double tstamp;tstamp105,3902
        unsigned int msgno;msgno106,3925
	unsigned int blkcnt;blkcnt107,3953
        struct Sblks {Sblks108,3975
                unsigned int sblk,eblk;sblk109,3998
                unsigned int sblk,eblk;eblk109,3998
        } sblks[3];sblks110,4038
} *msg, *ack;msg111,4058
} *msg, *ack;ack111,4058
int dupacks;			/* consecutive dup acks recd */dupacks114,4098
unsigned int snd_nxt; 		/* send next */snd_nxt115,4145
unsigned int snd_max; 		/* biggest send */snd_max116,4185
unsigned int snd_una; 		/* last unacked */snd_una117,4228
unsigned int snd_fack;		/* Forward (right) most ACK */snd_fack118,4271
unsigned int snd_recover;	/* One RTT beyond last good data, newreno */snd_recover119,4326
double snd_cwnd;		/* congestion-controlled window */snd_cwnd120,4397
unsigned int snd_ssthresh;	/* slow start threshold */snd_ssthresh121,4450
unsigned int ackno;ackno123,4505
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;ipkts126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;opkts126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;dup3s126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;dups126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;packs126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;badacks126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;maxburst126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;maxack126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;rxmts126,4538
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;timeouts126,4538
int enobufs, ooacks;enobufs127,4613
int enobufs, ooacks;ooacks127,4613
double et,minrtt=999999., maxrtt=0, avrgrtt;et128,4634
double et,minrtt=999999., maxrtt=0, avrgrtt;minrtt128,4634
double et,minrtt=999999., maxrtt=0, avrgrtt;maxrtt128,4634
double et,minrtt=999999., maxrtt=0, avrgrtt;avrgrtt128,4634
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;rto129,4679
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;delta129,4679
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;srtt129,4679
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;rttvar129,4679
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;h129,4679
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;g129,4679
double due,rcvt,secs();due130,4736
double due,rcvt,secs();rcvt130,4736
struct	sockaddr_in san;	/* socket address */san132,4761
char *configfile = "config";configfile134,4807
typedef int socket_t;socket_t137,4892
void ctrlc(){ctrlc153,5314
int main (int argc, char** argv){main160,5385
void done(void){done171,5599
void usage(void){usage202,7104
int doit(char* host){doit207,7176
void send_segs(socket_t fd){send_segs333,10917
void send_one(socket_t fd, unsigned int n){send_one410,13042
void handle_ack(socket_t fd){handle_ack442,13846
tcp_newreno(fd)tcp_newreno573,18422
double secs(void)secs599,19086
socket_t timedread(socket_t fd, double t){timedread606,19205
void err_sys(char* s){err_sys617,19425
void rdconfig(void){rdconfig623,19485
void vntohl(int *p, int cnt){vntohl712,23177
void vhtonl(int *p, int cnt)vhtonl718,23330
void handle_sack(socket_t fd){handle_sack729,23663
duplicate(fd, sackno) {duplicate899,28821
int UpdateScoreBoard(int last_ack) {UpdateScoreBoard968,30908
int CheckSndNxt() {CheckSndNxt1044,32912
int GetNextRetran() {GetNextRetran1063,33390
void MarkRetran (int retran_seqno, int snd_max) { MarkRetran1077,33703
int RetransOK (int retran_seqno) { RetransOK1083,33881
void ClearScoreBoard() {ClearScoreBoard1095,34163
static struct Aimd_Vals {Aimd_Vals1100,34244
	unsigned int cwnd;cwnd1101,34270
	unsigned int increment;increment1102,34290
	unsigned int decrement;decrement1103,34315
} aimd_vals[] = {aimd_vals1104,34340
void floyd_aimd(int cevent){floyd_aimd1182,36837
bwe_calc( double rtt)bwe_calc1199,37457
advance_cwnd()advance_cwnd1220,38478

probeall.pl,0
