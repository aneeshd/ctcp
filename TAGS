
IETF draft-tcp-over-udp-01.htm,7901
    function addHeaderTags() {addHeaderTags105,3707
    function showElem(id) {showElem118,5382
    function hideElem(id) {hideElem123,5553
</pre><pre class="newpage"><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>page-2192,10707
</pre><pre class="newpage"><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>page-3248,15587
</pre><pre class="newpage"><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>page-4304,16088
<span class="h2"><a name="section-1">1</a>.  Introduction</span>section-1308,16288
</pre><pre class="newpage"><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>page-5360,20136
<span class="h3"><a name="section-1.1">1.1</a>.  Conventions</span>section-1.1368,20705
<span class="h3"><a name="section-1.2">1.2</a>.  Terminology</span>section-1.2374,21169
<span class="h2"><a name="section-2">2</a>.  Model of Operation</span>section-2382,21577
<span class="h3"><a name="section-2.1">2.1</a>.  Setup and tear down</span>section-2.1388,21816
<span class="h3"><a name="section-2.2">2.2</a>.  Connection tracking</span>section-2.2393,22043
<span class="h3"><a name="section-2.3">2.3</a>.  MTU discovery</span>section-2.3400,22403
</pre><pre class="newpage"><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>page-6416,23275
<span class="h2"><a name="section-3">3</a>.  Congestion Control, Flow Control, and Reliability</span>section-3425,23642
<span class="h3"><a name="section-3.1">3.1</a>.  Explicit Congestion Notification (ECN)</span>section-3.1449,25667
<span class="h2"><a name="section-4">4</a>.  Header Format</span>section-4463,26588
</pre><pre class="newpage"><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>page-7472,27081
</pre><pre class="newpage"><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>page-8528,30414
<span class="h2"><a name="section-5">5</a>.  NAT related issues</span>section-5576,32391
</pre><pre class="newpage"><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>page-9584,32712
<span class="h3"><a name="section-5.1">5.1</a>.  Using ToU</span>section-5.1588,32912
<span class="h3"><a name="section-5.2">5.2</a>.  NAT bindings</span>section-5.2600,33886
<span class="h2"><a name="section-6">6</a>.  ToU, TLS, and DTLS</span>section-6619,35056
</pre><pre class="newpage"><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>page-10640,36365
<span class="h2"><a name="section-7">7</a>.  Implementation Guidelines</span>section-7659,37005
<span class="h2"><a name="section-8">8</a>.  Design Alternatives</span>section-8671,37638
<span class="h3"><a name="section-8.1">8.1</a>.  Changing IP protocol number</span>section-8.1678,37980
</pre><pre class="newpage"><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>page-11696,39025
<span class="h3"><a name="section-8.2">8.2</a>.  Simplified TCP</span>section-8.2703,39357
<span class="h3"><a name="section-8.3">8.3</a>.  TCP-like mechanism within an application layer protocol</span>section-8.3718,40263
<span class="h3"><a name="section-8.4">8.4</a>.  Tunneling</span>section-8.4733,41227
</pre><pre class="newpage"><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>page-12752,42225
<span class="h3"><a name="section-8.5">8.5</a>.  TFRC</span>section-8.5762,42782
<span class="h3"><a name="section-8.6">8.6</a>.  SCTP</span>section-8.6777,43774
<span class="h3"><a name="section-8.7">8.7</a>.  Criticism</span>section-8.7787,44428
</pre><pre class="newpage"><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>page-13808,45488
<span class="h2"><a name="section-9">9</a>.  Acknowledgements</span>section-9812,45691
<span class="h2"><a name="section-10">10</a>.  IANA Considerations</span>section-10819,45943
<span class="h2"><a name="section-11">11</a>.  Security Considerations</span>section-11824,46033
<span class="h2"><a name="section-12">12</a>.  References</span>section-12829,46181
<span class="h3"><a name="section-12.1">12.1</a>.  Normative References</span>section-12.1831,46249
   [<a name="ref-I-D.ietf-tcpm-rfc2581bis" id="ref-I-D.ietf-tcpm-rfc2581bis">I-D.ietf-tcpm-rfc2581bis</a>]ref-I-D.ietf-tcpm-rfc2581bis833,46331
   [<a name="ref-I-D.ietf-tcpm-tcp-auth-opt" id="ref-I-D.ietf-tcpm-tcp-auth-opt">I-D.ietf-tcpm-tcp-auth-opt</a>]ref-I-D.ietf-tcpm-tcp-auth-opt838,46683
   [<a name="ref-RFC0793" id="ref-RFC0793">RFC0793</a>]  Postel, J., "Transmission Control Protocol", STD 7,ref-RFC0793843,47052
   [<a name="ref-RFC0854" id="ref-RFC0854">RFC0854</a>]  Postel, J. and J. Reynolds, "Telnet Protocolref-RFC0854846,47252
   [<a name="ref-RFC1122" id="ref-RFC1122">RFC1122</a>]  Braden, R., "Requirements for Internet Hosts -ref-RFC1122849,47462
   [<a name="ref-RFC1323" id="ref-RFC1323">RFC1323</a>]  Jacobson, V., Braden, B., and D. Borman, "TCP Extensionsref-RFC1323852,47687
   [<a name="ref-RFC2018" id="ref-RFC2018">RFC2018</a>]  Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, "TCPref-RFC2018855,47911
   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicateref-RFC2119858,48151
</pre><pre class="newpage"><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>page-14864,48533
   [<a name="ref-RFC3168" id="ref-RFC3168">RFC3168</a>]  Ramakrishnan, K., Floyd, S., and D. Black, "The Additionref-RFC3168868,48736
   [<a name="ref-RFC3390" id="ref-RFC3390">RFC3390</a>]  Allman, M., Floyd, S., and C. Partridge, "Increasing TCP'sref-RFC3390872,49008
   [<a name="ref-RFC4347" id="ref-RFC4347">RFC4347</a>]  Rescorla, E. and N. Modadugu, "Datagram Transport Layerref-RFC4347875,49232
   [<a name="ref-RFC4821" id="ref-RFC4821">RFC4821</a>]  Mathis, M. and J. Heffner, "Packetization Layer Path MTUref-RFC4821878,49445
   [<a name="ref-RFC4960" id="ref-RFC4960">RFC4960</a>]  Stewart, R., "Stream Control Transmission Protocol",ref-RFC4960881,49660
   [<a name="ref-RFC5246" id="ref-RFC5246">RFC5246</a>]  Dierks, T. and E. Rescorla, "The Transport Layer Securityref-RFC5246884,49863
   [<a name="ref-RFC5348" id="ref-RFC5348">RFC5348</a>]  Floyd, S., Handley, M., Padhye, J., and J. Widmer, "TCPref-RFC5348887,50097
   [<a name="ref-RFC5389" id="ref-RFC5389">RFC5389</a>]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,ref-RFC5389891,50373
<span class="h3"><a name="section-12.2">12.2</a>.  Informative References</span>section-12.2895,50634
   [<a name="ref-Daytona" id="ref-Daytona">Daytona</a>]  Pradhan, P., Kandula, S., Xu, W., Sheikh, A., and E.ref-Daytona897,50718
   [<a name="ref-I-D.ietf-behave-nat-behavior-discovery" id="ref-I-D.ietf-behave-nat-behavior-discovery">I-D.ietf-behave-nat-behavior-discovery</a>]ref-I-D.ietf-behave-nat-behavior-discovery901,51033
   [<a name="ref-I-D.ietf-mmusic-ice" id="ref-I-D.ietf-mmusic-ice">I-D.ietf-mmusic-ice</a>]ref-I-D.ietf-mmusic-ice906,51459
   [<a name="ref-I-D.ietf-mmusic-ice-tcp" id="ref-I-D.ietf-mmusic-ice-tcp">I-D.ietf-mmusic-ice-tcp</a>]ref-I-D.ietf-mmusic-ice-tcp912,51889
</pre><pre class="newpage"><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>page-15920,52351
   [<a name="ref-MINET" id="ref-MINET">MINET</a>]    Dinda, P., "The Minet TCP/IP Stack", 2002, &lt;<a href="http://cs.northwestern.edu/%7Epdinda/minet/NWU-CS-02-08.pdf">http://</a>ref-MINET926,52582
   [<a name="ref-atou" id="ref-atou">atou</a>]     Dunigan, T. and F. Fowler, "A TCP-over-UDP Test Harness",ref-atou929,52912
<span class="h2"><a name="appendix-A">Appendix A</a>.  Change Log</span>appendix-A933,53154
<span class="h1"><a name="appendix-A.1">A.1</a>.  Changes since <a href="http://tools.ietf.org/html/draft-baset-tsvwg-tcp-over-udp-00">draft-baset-tsvwg-tcp-over-udp-00</a></span>appendix-A.1935,53230

util.c,86
void vntohl(int *p, int cnt){vntohl6,67
void vhtonl(int *p, int cnt){vhtonl12,220

util.h,65
#define UTIL_H_UTIL_H_2,16
typedef int socket_t;socket_t4,33

scoreboard.h,1708
#define SBSIZE SBSIZE3,56
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;length_5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;first_5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;HighAck5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;Pipe5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;loss3s5,77
int length_=0, first_=0, HighAck=0, Pipe=0, loss3s=0, NextLoss=0;NextLoss5,77
int retran_seqno=0, cumacks=0, goodacks=0, dup_acks=0;retran_seqno6,143
int retran_seqno=0, cumacks=0, goodacks=0, dup_acks=0;cumacks6,143
int retran_seqno=0, cumacks=0, goodacks=0, dup_acks=0;goodacks6,143
int retran_seqno=0, cumacks=0, goodacks=0, dup_acks=0;dup_acks6,143
int dup_total=0;int SACKed=0, ACKed=0;dup_total7,198
int dup_total=0;int SACKed=0, ACKed=0;SACKed7,198
int dup_total=0;int SACKed=0, ACKed=0;ACKed7,198
int FastRecovery=0;FastRecovery8,237
double wintrim = 0.0, winmult = 0.5;wintrim10,258
double wintrim = 0.0, winmult = 0.5;winmult10,258
int retran_data = 0, awnd = 0;retran_data11,295
int retran_data = 0, awnd = 0;awnd11,295
int IsEmpty () {return (length_ == 0);}IsEmpty13,327
struct ScoreBoardNode {ScoreBoardNode21,518
	int seq_no_;		/* Packet number */seq_no_22,542
	int ack_flag_;		/* Acked by cumulative ACK */ack_flag_23,577
	int sack_flag_;		/* Acked by SACK block */sack_flag_24,624
	int retran_;		/* Packet retransmitted */retran_25,668
	int snd_nxt_;		/* snd_nxt at time of retransmission */snd_nxt_26,710
	int sack_cnt_;		/* number of reports for this hole */sack_cnt_27,766
	} SBN[SBSIZE+1];SBN28,821
#define SBNI SBNI30,840

atousrv.c,3126
char *RCSid = "$Header: /home/thistle/dunigan/src/atou/atousrv.c,v 1.8 2002/06/20 14:28:46 dunigan Exp dunigan $";RCSid42,1168
char *version = "$Revision: 1.8 $";version43,1283
#define PORT PORT44,1319
#define BUFFSIZE BUFFSIZE45,1337
double dbuff[BUFFSIZE/8];dbuff46,1367
int *buff = (int *)dbuff;buff47,1393
int sockfd, rcvspace;sockfd48,1419
int sockfd, rcvspace;rcvspace48,1419
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;inlth49,1441
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;sackcnt49,1441
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;pkts49,1441
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;dups49,1441
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;drops49,1441
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;hi49,1441
int inlth,sackcnt,pkts, dups, drops,hi,maxooo;maxooo49,1441
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;debug50,1488
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;expect50,1488
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;expected50,1488
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;acks50,1488
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;acktimeouts50,1488
int debug = 0,expect=1, expected, acks, acktimeouts=0, sendack=0;sendack50,1488
#define MAXHO MAXHO52,1625
int  hocnt, holes[MAXHO];hocnt53,1644
int  hocnt, holes[MAXHO];holes53,1644
int sack=0, clilen; sack55,1702
int sack=0, clilen; clilen55,1702
struct sockaddr_in	cli_addr;cli_addr56,1723
int ackdelay=0 /* usual is 200 ms */, ackheadr, sackinfo;ackdelay57,1752
int ackdelay=0 /* usual is 200 ms */, ackheadr, sackinfo;ackheadr57,1752
int ackdelay=0 /* usual is 200 ms */, ackheadr, sackinfo;sackinfo57,1752
int  settime=0;settime58,1810
int start[3], endd[3];start59,1826
int start[3], endd[3];endd59,1826
double et,minrtt=999999., maxrtt=0, avrgrtt;et62,1876
double et,minrtt=999999., maxrtt=0, avrgrtt;minrtt62,1876
double et,minrtt=999999., maxrtt=0, avrgrtt;maxrtt62,1876
double et,minrtt=999999., maxrtt=0, avrgrtt;avrgrtt62,1876
double due,rcvt,st,et,secs();due63,1921
double due,rcvt,st,et,secs();rcvt63,1921
double due,rcvt,st,et,secs();st63,1921
double due,rcvt,st,et,secs();et63,1921
unsigned int millisecs(), rtt_base=0;rtt_base64,1951
struct Pr_Msg {Pr_Msg66,1990
	double tstamp;tstamp67,2006
	unsigned int msgno;  /* msgno or ackno */msgno68,2022
	unsigned int blkcnt;blkcnt69,2065
	struct Sblks {Sblks70,2087
		unsigned int sblk,eblk;sblk71,2103
		unsigned int sblk,eblk;eblk71,2103
	} sblks[3];sblks72,2129
} *msg, ack;msg73,2142
} *msg, ack;ack73,2142
unsigned int tempno;tempno75,2156
void  ctrlc(void){ctrlc77,2178
void usage(void) {usage91,2665
int main(int argc, char** argv){main101,2992
void err_sys(char *s){err_sys193,5704
void bldack()bldack198,5780
int check_order(int newpkt) {check_order276,7772
void addho(int n){addho289,7996
void fixho(int n){fixho304,8329
secs()secs319,8593
unsigned int millisecs(){millisecs331,8842
int acktimer(socket_t fd, int t) {acktimer342,9199

mktar,0

Makefile,478
CXX := gccCXX1,0
CFLAGS := -g -WallCFLAGS2,11
LDFLAGS :=LDFLAGS3,30
TARGETS := util \TARGETS5,42
HEADERS := scoreboard.h \HEADERS9,83
SRCS := $(TARGETS:%=%.c)SRCS11,110
OBJS := $(TARGETS:%=%.o)OBJS13,136
PRODUCTS := $(filter-out util, $(TARGETS))PRODUCTS15,162
NEWMODE := modeNEWMODE18,286
	CFLAGS := -DDEBUG -O0 $(CFLAGS)CFLAGS23,455
	CFLAGS := -O3 -ffast-math -DNDEBUG $(CFLAGS)CFLAGS26,511
OLDMODE := $(shell cat .buildmode 2> /dev/null)OLDMODE32,748

atoucli.c,7862
#define TRUE TRUE43,1476
#define FALSE FALSE44,1491
char *RCSid = "$Header: /home/wisp/dunigan/src/atou/atoucli.c,v 1.38 2003/01/16 19:07:57 dunigan Exp dunigan $";RCSid47,1524
char *version = "$Revision: 1.38 $";version48,1637
FILE *db;     /* debug trace file */db50,1675
int droplist[11];  /* debuggin */droplist53,1744
int debug;debug54,1778
char *host;host55,1789
#define PORT PORT56,1801
int port=PORT;			/* udp port */port57,1819
int sndbuf = 32768;		/* udp send buff, bigger than mss */sndbuf58,1851
int rcvbuf = 32768;		/* udp recv buff for ACKs*/rcvbuf59,1909
int mss=1472;			/* user payload, can be > MTU for UDP */mss60,1958
double tick = 1.0;		/* recvfrom timeout -- select */tick61,2015
double timeout=0.5;		/* pkt timeout */timeout62,2068
int idle=0;                     /* successive timeouts */idle63,2107
int maxidle=10;                 /* max idle before abort */maxidle64,2165
int maxpkts=0;			/* test duration */maxpkts65,2225
int maxtime=10;                 /* test duration */maxtime66,2262
int burst_limit = 0;		/* most to send at once --- weak */burst_limit67,2314
int rcvrwin = 20;		/* rcvr window in mss-segments */rcvrwin68,2372
int dup_thresh =3;		/* dup ACKs causing retransmit */dup_thresh69,2425
int increment = 1;   		/* cc increment */increment70,2479
double multiplier = 0.5;	/* cc backoff */multiplier71,2521
double kai = 0.;		/* Kelly scalable TCP cwnd += kai */kai72,2563
int ssincr =1;			/* slow start increment */ssincr73,2618
double thresh_init = 1.0;      /* fraction of rvcvwind for initial ssthresh*/thresh_init74,2662
int max_ssthresh =0;            /* floyd modified slow start, ? consider frac */max_ssthresh75,2740
int initsegs = 2;		/* slowstart initial */initsegs76,2821
int newreno = 1;		/* newreno flag */newreno77,2864
int sack = 0;			/* sack flag */sack78,2901
int delack = 0;			/* delack flag */delack79,2933
int rampdown = 0;		/* enable wintrim */rampdown80,2969
int fack = 0;			/* fack flag */fack81,3009
int floyd = 0;			/* Sally Floyd's aimd changes */floyd82,3041
int vegas=0;                    /* vegas flag 0:off 1:last RTT  2:min rtt  */vegas83,3091
int vss = 0;                    /* vegas slow start  0:exit ss  1: go to floyd*/vss85,3247
double valpha=1.0, vbeta=3.0, vgamma=1.0;  /* vegas parameters */valpha86,3328
double valpha=1.0, vbeta=3.0, vgamma=1.0;  /* vegas parameters */vbeta86,3328
double valpha=1.0, vbeta=3.0, vgamma=1.0;  /* vegas parameters */vgamma86,3328
int vinss=0;   /* in vegas slow start */vinss89,3425
int vsscnt=0;  /* number of vegas slow start adjusts */vsscnt90,3466
int vcnt;  /* number of rtt samples */vcnt91,3522
int vdecr, v0 ; /* vegas decrements or no adjusts */vdecr92,3561
int vdecr, v0 ; /* vegas decrements or no adjusts */v092,3561
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vdelta93,3614
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vrtt93,3614
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vrttsum93,3614
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vrttmax93,3614
double vdelta, vrtt,vrttsum,vrttmax, vrttmin=999999;vrttmin93,3614
int initial_ss =1;   /* initial slow start */initial_ss95,3668
unsigned int bwe_pkt, bwe_prev, bwe_on=1;bwe_pkt98,3716
unsigned int bwe_pkt, bwe_prev, bwe_on=1;bwe_prev98,3716
unsigned int bwe_pkt, bwe_prev, bwe_on=1;bwe_on98,3716
double bwertt, bwertt_max;bwertt99,3758
double bwertt, bwertt_max;bwertt_max99,3758
double max_delta;  /* vegas like tracker */max_delta100,3785
#define BUFFSIZE BUFFSIZE102,3830
double dbuff[BUFFSIZE/8];dbuff103,3860
int *buff = (int *)dbuff;buff104,3886
struct Pr_Msg {Pr_Msg106,3913
        double tstamp;tstamp107,3929
        unsigned int msgno;msgno108,3952
	unsigned int blkcnt;blkcnt109,3980
        struct Sblks {Sblks110,4002
                unsigned int sblk,eblk;sblk111,4025
                unsigned int sblk,eblk;eblk111,4025
        } sblks[3];sblks112,4065
} *msg, *ack;msg113,4085
} *msg, *ack;ack113,4085
int dupacks;			/* consecutive dup acks recd */dupacks116,4125
unsigned int snd_nxt; 		/* send next */snd_nxt117,4172
unsigned int snd_max; 		/* biggest send */snd_max118,4212
unsigned int snd_una; 		/* last unacked */snd_una119,4255
unsigned int snd_fack;		/* Forward (right) most ACK */snd_fack120,4298
unsigned int snd_recover;	/* One RTT beyond last good data, newreno */snd_recover121,4353
double snd_cwnd;		/* congestion-controlled window */snd_cwnd122,4424
unsigned int snd_ssthresh;	/* slow start threshold */snd_ssthresh123,4477
unsigned int ackno;ackno125,4532
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;ipkts128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;opkts128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;dup3s128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;dups128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;packs128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;badacks128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;maxburst128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;maxack128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;rxmts128,4565
int ipkts,opkts,dup3s,dups,packs,badacks,maxburst,maxack, rxmts, timeouts;timeouts128,4565
int enobufs, ooacks;enobufs129,4640
int enobufs, ooacks;ooacks129,4640
double et,minrtt=999999., maxrtt=0, avrgrtt;et130,4661
double et,minrtt=999999., maxrtt=0, avrgrtt;minrtt130,4661
double et,minrtt=999999., maxrtt=0, avrgrtt;maxrtt130,4661
double et,minrtt=999999., maxrtt=0, avrgrtt;avrgrtt130,4661
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;rto131,4706
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;delta131,4706
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;srtt131,4706
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;rttvar131,4706
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;h131,4706
static double rto,delta,srtt=0,rttvar=3., h=.25, g=.125;g131,4706
double due,rcvt,secs();due132,4763
double due,rcvt,secs();rcvt132,4763
struct	sockaddr_in san;	/* socket address */san134,4788
char *configfile = "config";configfile136,4834
void ctrlc(){ctrlc157,5412
int main (int argc, char** argv){main164,5483
void done(void){done176,5709
void usage(void){usage207,7214
int doit(char* host){doit212,7286
void send_segs(socket_t fd){send_segs339,11075
void send_one(socket_t fd, unsigned int n){send_one416,13200
void handle_ack(socket_t fd){handle_ack448,14004
int tcp_newreno(socket_t fd){tcp_newreno579,18580
double secs(void)secs604,19263
socket_t timedread(socket_t fd, double t){timedread611,19382
void err_sys(char* s){err_sys622,19602
void rdconfig(void){rdconfig628,19662
void handle_sack(socket_t fd){handle_sack722,23532
void duplicate(socket_t fd, int sackno) {duplicate892,28682
int UpdateScoreBoard(int last_ack) {UpdateScoreBoard961,30773
int CheckSndNxt() {CheckSndNxt1037,32777
int GetNextRetran() {GetNextRetran1056,33255
void MarkRetran (int retran_seqno, int snd_max) { MarkRetran1070,33568
int RetransOK (int retran_seqno) { RetransOK1076,33746
void ClearScoreBoard() {ClearScoreBoard1088,34028
static struct Aimd_Vals {Aimd_Vals1093,34109
	unsigned int cwnd;cwnd1094,34135
	unsigned int increment;increment1095,34155
	unsigned int decrement;decrement1096,34180
} aimd_vals[] = {aimd_vals1097,34205
void floyd_aimd(int cevent){floyd_aimd1175,37302
void bwe_calc(double rtt){bwe_calc1192,37922
void advance_cwnd(void){advance_cwnd1212,38739

probeall.pl,0
