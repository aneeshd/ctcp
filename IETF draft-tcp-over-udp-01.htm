<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head profile="http://dublincore.org/documents/2008/08/04/dc-html/">


    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta name="robots" content="index,follow">
    <meta name="creator" content="rfcmarkup version 1.91">
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/">
<meta name="DC.Identifier" content="urn:ietf:id:baset-tsvwg-tcp-over-udp">
<meta name="DC.Description.Abstract" content="We present TCP-over-UDP (ToU), an instance of TCP on top of UDP. It\nprovides exactly the same congestion control, flow control,\nreliability, and extension mechanisms as offered by TCP. It is\nintended for use in scenarios where applications running on two hosts\nmay not be able to establish a direct TCP connection but are able to\nexchange UDP packets.">
<meta name="DC.Creator" content="Schulzrinne, Henning">
<meta name="DC.Creator" content="Baset, Salman">
<meta name="DC.Date.Issued" content="2009-06-07">
<meta name="DC.Title" content="TCP-over-UDP">

    <link rel="icon" href="http://tools.ietf.org/images/id.png" type="image/png">
    <link rel="shortcut icon" href="http://tools.ietf.org/images/id.png" type="image/png">
    <title>draft-baset-tsvwg-tcp-over-udp-01 - TCP-over-UDP</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        @media print {
            body {
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 10.5pt;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head><body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';" onclick="showElem('legend');" onmouseout="hideElem('legend')" style="height: 6px; position: absolute;" class="pre noprint docinfo bgred" title="Click for colour legend.">                                                                        </div>
      <div id="legend" class="docinfo noprint pre legend" style="position: absolute; top: 4px; left: 4ex; visibility: hidden; background-color: white; padding: 4px 9px 5px 7px; border: 1px solid rgb(51, 68, 85);" onmouseover="showElem('legend');" onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="http://tools.ietf.org/html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-baset-tsvwg-tcp-over-udp-01.txt" title="Plaintext version of this document">txt</a>|<a href="http://tools.ietf.org/pdf/draft-baset-tsvwg-tcp-over-udp-01.txt" title="PDF version of this document">pdf</a>|<a href="http://tools.ietf.org/id/draft-baset-tsvwg-tcp-over-udp-01.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href="mailto:draft-baset-tsvwg-tcp-over-udp@tools.ietf.org?subject=draft-baset-tsvwg-tcp-over-udp%20" title="Send email to the document authors">Email</a>] [<a href="http://tools.ietf.org/rfcdiff?difftype=--hwdiff&amp;url2=draft-baset-tsvwg-tcp-over-udp-01.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="http://tools.ietf.org/rfcdiff?url2=draft-baset-tsvwg-tcp-over-udp-01.txt" title="Side-by-side diff">Diff2</a>] [<a href="http://tools.ietf.org/idnits?url=http://tools.ietf.org/id/draft-baset-tsvwg-tcp-over-udp-01.txt" title="Run an idnits check of this document">Nits</a>]                    </span><br>
<span class="pre noprint docinfo">                                                                        </span><br>
<span class="pre noprint docinfo">Versions: <a href="http://tools.ietf.org/html/draft-baset-tsvwg-tcp-over-udp-00">00</a> <a href="http://tools.ietf.org/html/draft-baset-tsvwg-tcp-over-udp-01">01</a>                                                         </span><br>
<span class="pre noprint docinfo">                                                                        </span><br>
<pre>Transport Area Working Group                                    S. Baset
Internet-Draft                                            H. Schulzrinne
Intended status: Experimental                        Columbia University
Expires: December 9, 2009                                   June 7, 2009


                              <span class="h1">TCP-over-UDP</span>
                   <span class="h1">draft-baset-tsvwg-tcp-over-udp-01</span>

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of <a href="http://tools.ietf.org/html/bcp78">BCP 78</a> and <a href="http://tools.ietf.org/html/bcp79">BCP 79</a>.  This document may contain material
   from IETF Documents or IETF Contributions published or made publicly
   available before November 10, 2008.  The person(s) controlling the
   copyright in some of this material may not have granted the IETF
   Trust the right to allow modifications of such material outside the
   IETF Standards Process.  Without obtaining an adequate license from
   the person(s) controlling the copyright in such materials, this
   document may not be modified outside the IETF Standards Process, and
   derivative works of it may not be created outside the IETF Standards
   Process, except to format it for publication as an RFC or to
   translate it into languages other than English.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   <a href="http://www.ietf.org/ietf/1id-abstracts.txt">http://www.ietf.org/ietf/1id-abstracts.txt</a>.

   The list of Internet-Draft Shadow Directories can be accessed at
   <a href="http://www.ietf.org/shadow.html">http://www.ietf.org/shadow.html</a>.

   This Internet-Draft will expire on December 9, 2009.

Copyright Notice

   Copyright (c) 2009 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="http://tools.ietf.org/html/bcp78">BCP 78</a> and the IETF Trust's Legal



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 1]</span>
</pre><pre class="newpage"><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   Provisions Relating to IETF Documents in effect on the date of
   publication of this document (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>).
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Abstract

   We present TCP-over-UDP (ToU), an instance of TCP on top of UDP.  It
   provides exactly the same congestion control, flow control,
   reliability, and extension mechanisms as offered by TCP.  It is
   intended for use in scenarios where applications running on two hosts
   may not be able to establish a direct TCP connection but are able to
   exchange UDP packets.


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-1.1">1.1</a>.  Conventions  . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.2">1.2</a>.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
   <a href="#section-2">2</a>.  Model of Operation . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-2.1">2.1</a>.  Setup and tear down  . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-2.2">2.2</a>.  Connection tracking  . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-2.3">2.3</a>.  MTU discovery  . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
   <a href="#section-3">3</a>.  Congestion Control, Flow Control, and Reliability  . . . . . .  <a href="#page-6">6</a>
     <a href="#section-3.1">3.1</a>.  Explicit Congestion Notification (ECN) . . . . . . . . . .  <a href="#page-6">6</a>
   <a href="#section-4">4</a>.  Header Format  . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
   <a href="#section-5">5</a>.  NAT related issues . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
     <a href="#section-5.1">5.1</a>.  Using ToU  . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
     <a href="#section-5.2">5.2</a>.  NAT bindings . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
   <a href="#section-6">6</a>.  ToU, TLS, and DTLS . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
   <a href="#section-7">7</a>.  Implementation Guidelines  . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
   <a href="#section-8">8</a>.  Design Alternatives  . . . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-8.1">8.1</a>.  Changing IP protocol number  . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-8.2">8.2</a>.  Simplified TCP . . . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     8.3.  TCP-like mechanism within an application layer protocol  . 11
     <a href="#section-8.4">8.4</a>.  Tunneling  . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     <a href="#section-8.5">8.5</a>.  TFRC . . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-8.6">8.6</a>.  SCTP . . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-8.7">8.7</a>.  Criticism  . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
   <a href="#section-9">9</a>.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
   <a href="#section-10">10</a>. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
   <a href="#section-11">11</a>. Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
   <a href="#section-12">12</a>. References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-12.1">12.1</a>. Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-12.2">12.2</a>. Informative References . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
   <a href="#appendix-A">Appendix A</a>.  Change Log  . . . . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#appendix-A.1">A.1</a>.  Changes since <a href="http://tools.ietf.org/html/draft-baset-tsvwg-tcp-over-udp-00">draft-baset-tsvwg-tcp-over-udp-00</a>  . . . . . <a href="#page-15">15</a>



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 2]</span>
</pre><pre class="newpage"><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>


















































<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 3]</span>
</pre><pre class="newpage"><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


<span class="h2"><a name="section-1">1</a>.  Introduction</span>

   Network address translators (NATs) pose a challenge for establishing
   a direct TCP connection between hosts.  While TCP connectivity works
   when a TCP client is behind a NAT device and the server is not, it is
   problematic when both the TCP client and server are behind different
   NAT devices.  Thus, applications running on hosts behind different
   NAT devices may not be able to establish a direct TCP connection with
   each other.  Instead, these applications must establish a TCP
   connection with a reachable host, which relays the traffic of the
   application on the first host to the application on the second host
   and vice versa.  While this works, this is undesirable as it creates
   a dependency on a reachable host.  With certain NAT types, even
   though the applications cannot establish a direct TCP connection,
   they may be able to exchange UDP traffic by using techniques such as
   ICE-UDP [<a href="#ref-I-D.ietf-mmusic-ice" title="&quot;Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal for Offer/Answer Protocols&quot;">I-D.ietf-mmusic-ice</a>].  Thus, using UDP is attractive for
   such applications as it removes the dependency on a reachable host.
   However, these applications have a requirement that the underlying
   transport be reliable.  Further, these applications may run on
   machines with heterogeneous network connectivity, thereby requiring
   flow control.  UDP does not provide reliability, congestion control,
   or flow control semantics.  Therefore, these applications may either
   use TCP with a reachable host, or invent their own reliable,
   congestion control, and flow control transport protocol to establish
   a direct connection.

   We present TCP-over-UDP (ToU), a reliable, congestion control, and
   flow control transport protocol on top of UDP.  The idea is that TCP
   is a well-designed transport protocol that provides reliable,
   congestion control, and flow control mechanisms and these mechanisms
   must be reused as much as possible.  Further, a transport protocol
   that provides reliability and flow control mechanisms must not be
   tied to a specific application and must be designed to provide
   modular functionality.  To accomplish this, ToU almost uses the same
   header as TCP which allows to easily incorporate TCP's reliable and
   congestion control algorithms as defined in TCP congestion control
   [<a href="#ref-I-D.ietf-tcpm-rfc2581bis" title="&quot;TCP Congestion Control&quot;">I-D.ietf-tcpm-rfc2581bis</a>] document.  In essence, ToU is not a new
   protocol but merely an instance (or profile) of TCP over UDP minus
   the TCP checksum, urgent flag, and urgent data.

   We think that our approach is attractive for several reasons.  First,
   we are not proposing a new congestion control algorithm.  Designing
   new congestion control algorithms is complex, and requires a large
   validation effort.  Second, our approach takes advantage of existing
   user-level-TCP (such as Daytona [<a href="#ref-Daytona" title="&quot;Daytona : A User-Level TCP Stack&quot;">Daytona</a>] and MINET [<a href="#ref-MINET" title="&quot;The Minet TCP/IP Stack&quot;">MINET</a>]) or TCP-
   over-UDP implementations (such as atou [<a href="#ref-atou" title="&quot;A TCP-over-UDP Test Harness&quot;">atou</a>]).  Finally, since we
   are replicating TCP semantics over UDP, any TCP options such as
   window scaling [<a href="http://tools.ietf.org/html/rfc1323" title="&quot;TCP Extensions for High Performance&quot;">RFC1323</a>], selective acknowledgement option (SACK)



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 4]</span>
</pre><pre class="newpage"><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   [<a href="http://tools.ietf.org/html/rfc2018" title="&quot;TCP Selective Acknowledgment Options&quot;">RFC2018</a>], or proposed TCP options such as TCP-Auth
   [<a href="#ref-I-D.ietf-tcpm-tcp-auth-opt" title="&quot;The TCP Authentication Option&quot;">I-D.ietf-tcpm-tcp-auth-opt</a>] can be easily incorporated in ToU
   without a new standardization effort.

<span class="h3"><a name="section-1.1">1.1</a>.  Conventions</span>

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <a href="http://tools.ietf.org/html/rfc2119">RFC 2119</a> [<a href="http://tools.ietf.org/html/rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].

<span class="h3"><a name="section-1.2">1.2</a>.  Terminology</span>

   We use the terms such as congestion window (cwnd), initial window
   (IW), restart window (RW), receiver window (rwnd), and sender maximum
   segment size (SMSS) as defined in TCP congestion control
   [<a href="#ref-I-D.ietf-tcpm-rfc2581bis" title="&quot;TCP Congestion Control&quot;">I-D.ietf-tcpm-rfc2581bis</a>] document.


<span class="h2"><a name="section-2">2</a>.  Model of Operation</span>

   Like TCP, ToU has a client and a server.  A client connects to a TCP
   server to establish a ToU connection.  Below, we describe the key ToU
   operations.

<span class="h3"><a name="section-2.1">2.1</a>.  Setup and tear down</span>

   Like TCP, ToU uses a three-way handshake to establish a connection.
   Similarly, it follows TCP's semantics in tearing down the connection.

<span class="h3"><a name="section-2.2">2.2</a>.  Connection tracking</span>

   A key difference between TCP and UDP is that the former is
   connection-oriented whereas the later is not.  This means that a ToU
   server must provide a way to keep track of existing connections.  It
   does so through the source port and IP address of the UDP packet.

<span class="h3"><a name="section-2.3">2.3</a>.  MTU discovery</span>

   ToU uses packetization layer path MTU discovery [<a href="http://tools.ietf.org/html/rfc4821" title="&quot;Packetization Layer Path MTU Discovery&quot;">RFC4821</a>] to discover
   link MTU.

   Some NAT devices placed in front of PPPoE devices perform MSS
   clamping, i.e., they rewrite TCP's MSS option in a SYN packet from
   1500 bytes to 1492 bytes.  This operation is performed because PPPoE
   has a MTU of 1492 bytes instead of Ethernet's 1500 bytes.  MSS
   clamping is considered a 'faster' way of discovering MTU in such
   scenarios.  MSS clamping does not work for ToU because NAT devices
   treat ToU packets as a stream of UDP packets.  It is an open question



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 5]</span>
</pre><pre class="newpage"><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   how a ToU stack should deal with PPPoE MTU if faster MTU discovery is
   desired.  One option is to configure ToU stack with a default MTU of
   1492 bytes.


<span class="h2"><a name="section-3">3</a>.  Congestion Control, Flow Control, and Reliability</span>

   ToU follows the TCP congestion control algorithms described in TCP
   congestion control [<a href="#ref-I-D.ietf-tcpm-rfc2581bis" title="&quot;TCP Congestion Control&quot;">I-D.ietf-tcpm-rfc2581bis</a>] document.  Thus, a ToU
   sender goes through the slow-start and congestion-avoidance phases.
   A ToU sender starts with an initial window (IW) following the
   guidelines in <a href="http://tools.ietf.org/html/rfc3390">RFC 3390</a> [<a href="http://tools.ietf.org/html/rfc3390" title="&quot;Increasing TCP&amp;#39;s Initial Window&quot;">RFC3390</a>].  During slow start, a ToU sender
   increments congestion window (cwnd) by at most SMSS bytes for each
   ACK received that cumulatively acknowledges new data.  It switches to
   congestion avoidance when the congestion window (cwnd) exceeds slow
   start threshold (ssthresh).  A ToU receiver generates an
   acknowledgement following the guidelines in <a href="#section-4.2">Section 4.2</a> of TCP
   congestion control [<a href="#ref-I-D.ietf-tcpm-rfc2581bis" title="&quot;TCP Congestion Control&quot;">I-D.ietf-tcpm-rfc2581bis</a>] document.  It
   immediately generates an ACK when an out-of-order segment arrives.
   The ToU sender uses the fast retransmit algorithm to detect and
   repair losses, and fast recovery algorithm to govern the transmission
   of new data until a non-duplicate ACK arrives.  When ToU sender has
   not received a segment for more than one retransmission timeout
   (RTO), cwnd is reduced to the value of the restart window (RW) before
   transmission begins.  The ToU sender may also use selective
   acknowledgement option (SACK) [<a href="http://tools.ietf.org/html/rfc2018" title="&quot;TCP Selective Acknowledgment Options&quot;">RFC2018</a>] to improve loss recovery when
   multiple packets are lost from one window of data.  Like TCP, it uses
   receiver window (rwnd) to achieve flow control.

<span class="h3"><a name="section-3.1">3.1</a>.  Explicit Congestion Notification (ECN)</span>

   TCP-over-UDP operates above UDP.  To use ECN [<a href="http://tools.ietf.org/html/rfc3168" title="&quot;The Addition of Explicit Congestion Notification (ECN) to IP&quot;">RFC3168</a>] with ToU, a
   UDP socket must allow ToU to set and retrieve the ECN bits in the IP
   header.  Currently, UDP sockets do not provide such a mechanism.
   However, ToU assumes that in future, UDP sockets will provide this
   mechanism so that ECN can be incorporated in the congestion control
   mechanism of ToU.

   ToU endpoints also need to determine whether they both support ECN.
   Similar to ECE and CWR flags for TCP as defined in ECN [<a href="http://tools.ietf.org/html/rfc3168" title="&quot;The Addition of Explicit Congestion Notification (ECN) to IP&quot;">RFC3168</a>], ToU
   header includes these flags.


<span class="h2"><a name="section-4">4</a>.  Header Format</span>

   A ToU header is like a TCP header [<a href="http://tools.ietf.org/html/rfc0793" title="&quot;Transmission Control Protocol&quot;">RFC0793</a>] except that it does not
   include source port, destination port, and checksum, as they are
   already included in the UDP header.  ToU header also does not include



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 6]</span>
</pre><pre class="newpage"><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   the 1-bit Urgent flag and bit corresponding to this flags are
   reserved in the ToU header.  Further, it also does not include the
   16-bit Urgent Pointer.  The reason for excluding Urgent flag and
   Urgent pointer is that they are only used in Telnet [<a href="http://tools.ietf.org/html/rfc0854" title="&quot;Telnet Protocol Specification&quot;">RFC0854</a>] which
   is not a widely used protocol.

   Between sequence number and acknowledgement number, ToU header has a
   32-bit magic cookie to demultiplex it with other UDP-based protocols
   such as STUN [<a href="http://tools.ietf.org/html/rfc5389" title="&quot;Session Traversal Utilities for NAT (STUN)&quot;">RFC5389</a>].  A ToU header also includes ECE and CWR flags
   for negotiating ECN capabilities.  These flags are defined in <a href="http://tools.ietf.org/html/rfc3168">RFC</a>
   <a href="http://tools.ietf.org/html/rfc3168">3168</a> [<a href="http://tools.ietf.org/html/rfc3168" title="&quot;The Addition of Explicit Congestion Notification (ECN) to IP&quot;">RFC3168</a>].  The rest of the fields in a ToU header have exactly
   the same meaning as those in a TCP header.  The size of the fixed ToU
   header is 16 bytes, whereas the size of fixed TCP header is 20 bytes.
   The fixed ToU header and UDP header have a cumulative size of 24
   bytes, four more than a fixed TCP header.


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                        Sequence Number                        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         Magic Cookie                          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    Acknowledgment Number                      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |  Data |       |C|E| |A|P|R|S|F|                               |
      | Offset|Reserve|W|C|R|C|S|S|Y|I|            Window             |
      |       |       |R|E| |K|H|T|N|N|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    Options                    |    Padding    |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                             data                              |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


                       Header for TCP-over-UDP (ToU)

                                 Figure 1

   Since ToU header fields are exactly the same as TCP, we have borrowed
   their descriptions from the TCP RFC [<a href="http://tools.ietf.org/html/rfc0793" title="&quot;Transmission Control Protocol&quot;">RFC0793</a>].

   Sequence Number (32-bits):  Same as a TCP sequence number.






<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 7]</span>
</pre><pre class="newpage"><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   Magic Cookie (32-bits):  A fixed value of 0x7194B32E in network byte
      order to demultiplex ToU from other application layer protocols.

   Acknowledgement Number (32-bits):  Same as a TCP acknowledgement
      number.

   Data offset (4-bits):  The number of 32-bit words in ToU header.
      Like a TCP header, ToU header is an integral number of 32-bits
      long.

   Reserved (4-bits):  Reserved for future use.  Must be zero.

   Control Bits (8-bits):  8-bits from left to right.  Unlike TCP, the
      Urgent bit is excluded.

      CWR: Congestion window reduced flag as defined in <a href="http://tools.ietf.org/html/rfc3168">RFC 3168</a>
      [<a href="http://tools.ietf.org/html/rfc3168" title="&quot;The Addition of Explicit Congestion Notification (ECN) to IP&quot;">RFC3168</a>].

      ECE: ECN-Echo flag as defined in <a href="http://tools.ietf.org/html/rfc3168">RFC 3168</a> [<a href="http://tools.ietf.org/html/rfc3168" title="&quot;The Addition of Explicit Congestion Notification (ECN) to IP&quot;">RFC3168</a>].

      R: Reserved in ToU.  In the TCP header, it is used for the Urgent
      bit.

      ACK: Acknowledgment field significant

      PSH: PSH function.

      RST: Reset the connection

      SYN: Synchronize sequence numbers

      FIN: No more data from sender

   Window (16-bits):  Same as the window in TCP header.  The number of
      data octets beginning with the one indicated in the acknowledgment
      field which the sender of this segment is willing to accept.

   Options:  Same as TCP options.

   Padding:  Like TCP, the ToU header padding is used to ensure that the
      ToU header ends and data begins on a 32 bit boundary.  The padding
      is composed of zeros.


<span class="h2"><a name="section-5">5</a>.  NAT related issues</span>

   This section discusses how to determine if hosts should use ToU and
   the impact of UDP NAT bindings on ToU connection management.



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 8]</span>
</pre><pre class="newpage"><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


<span class="h3"><a name="section-5.1">5.1</a>.  Using ToU</span>

   Hosts should only use ToU when establishing a direct TCP connection
   fails.  It is outside the scope of this draft to specify a mechanism
   to determine if establishing a TCP connection fails between two hosts
   behind NATs.  Hosts may use ICE-TCP [<a href="#ref-I-D.ietf-mmusic-ice-tcp" title="&quot;TCP Candidates with Interactive Connectivity Establishment (ICE)&quot;">I-D.ietf-mmusic-ice-tcp</a>] and
   ICE-UDP [<a href="#ref-I-D.ietf-mmusic-ice" title="&quot;Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal for Offer/Answer Protocols&quot;">I-D.ietf-mmusic-ice</a>] to determine if hosts can directly
   establish a TCP connection or directly exchange UDP packets,
   respectively.  If hosts fail to establish a direct TCP connection but
   are able to directly exchange UDP packets, they can establish a ToU
   connection.

<span class="h3"><a name="section-5.2">5.2</a>.  NAT bindings</span>

   NAT devices maintain a binding for mapping an internal IP address and
   port number to an external IP address and port number.  The lifetime
   of bindings for UDP is much smaller than TCP because UDP is a
   connection less protocol.  If an application does not send packets
   over ToU, the UDP binding may be lost resulting in a broken ToU
   connection.

   ToU does not provide any mechanism to determine UDP binding lifetimes
   or to refresh these bindings.  Rather, an application establishing a
   ToU connection can use STUN [<a href="http://tools.ietf.org/html/rfc5389" title="&quot;Session Traversal Utilities for NAT (STUN)&quot;">RFC5389</a>] to discover
   [<a href="#ref-I-D.ietf-behave-nat-behavior-discovery" title="&quot;NAT Behavior Discovery Using STUN&quot;">I-D.ietf-behave-nat-behavior-discovery</a>] binding lifetimes and
   periodically refresh these bindings.  Running STUN in conjunction
   with ToU has a design implication that a ToU packet must be
   differentiated from a STUN packet.  The magic cookie in a ToU packet
   serves this purpose.


<span class="h2"><a name="section-6">6</a>.  ToU, TLS, and DTLS</span>

   Transport layer security (TLS) [<a href="http://tools.ietf.org/html/rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>] and Datagram transport layer
   security (DTLS) [<a href="http://tools.ietf.org/html/rfc4347" title="&quot;Datagram Transport Layer Security&quot;">RFC4347</a>] protocols provide privacy and data
   integrity between two communicating applications.  TLS is layered on
   top of some reliable transport protocol such as TCP, whereas DTLS
   only assumes a datagram service.  A question is what is the layering
   relationship between ToU protocol, TLS, and DTLS.  Figure 2 shows
   three possible options.  Option-3 is not feasible since ToU layer
   must be made aware of the size of header which DTLS may add.
   Option-2 layers DTLS on top of ToU.  Unlike TLS, DTLS carries a
   sequence number because it assumes a datagram service.  However, the
   use of sequence number is made redundant because ToU provides
   reliable and inorder delivery semantics.  Therefore, Option-1 is most
   feasible in which TLS is layered on top of ToU.





<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009                [Page 9]</span>
</pre><pre class="newpage"><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


      +-+-+-+-+   +-+-+-+-+   +-+-+-+-+
      |  TLS  |   |  DTLS |   |  ToU  |
      +-+-+-+-+   +-+-+-+-+   +-+-+-+-+
      |  ToU  |   |  ToU  |   |  DTLS |
      +-+-+-+-+   +-+-+-+-+   +-+-+-+-+
      |  UDP  |   |  UDP  |   |  UDP  |
      +-+-+-+-+   +-+-+-+-+   +-+-+-+-+
      Option-1    Option-2    Option-3


                    Layering options for ToU, TLS, DTLS

                                 Figure 2


<span class="h2"><a name="section-7">7</a>.  Implementation Guidelines</span>

   From the implementers perspective, the use of ToU should be as
   modular as possible.  Once way to achieve this modularity is to
   implement ToU as a user-level library that provides socket-like
   function calls to the applications.  The library may have its own
   thread of execution and can be instantiated at the start of the
   program.  The library implements the reliable, inorder, congestion
   control, and flow control semantics of TCP.  Applications can
   interact with the ToU library through socket-like function calls.


<span class="h2"><a name="section-8">8</a>.  Design Alternatives</span>

   ToU is strictly meant for scenarios where end-points desire to
   establish a TCP connection but are unable to do so due to the
   presence of NATs and firewalls.  Below, we briefly discuss the design
   alternatives and address possible criticisms for ToU.

<span class="h3"><a name="section-8.1">8.1</a>.  Changing IP protocol number</span>

   One solution is to change the IP protocol number of TCP packets to
   UDP before sending them on the wire.  Similarly, when the packets are
   received, the protocol number is changed back to TCP and the received
   packets are passed to the TCP stack.  The idea behind this approach
   is to reuse TCP stack as much as possible.  This approach suffers
   from a number of problems.  First, it requires a change in the
   operating system kernel to rewrite IP protocol number of TCP packets
   to UDP and it is unrealistic to expect all the OS kernels to
   implement this change.  Second, TCP checksum has a different offset
   than a UDP checksum and many NAT devices parsing the UDP packet will
   reject the packet because the UDP checksum is incorrect.  Third,
   since applications can use the same port number for TCP and UDP



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009               [Page 10]</span>
</pre><pre class="newpage"><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   ports, it is unclear how the kernel will correctly differentiate
   between TCP and UDP packets for the same port number.

<span class="h3"><a name="section-8.2">8.2</a>.  Simplified TCP</span>

   It may be argued that TCP semantics are too complicated and it might
   be easier to define a protocol that adds retransmission of individual
   UDP packets, and ACK mechanisms, and sequencing layer.  However,
   unless one is content with stop-and-wait congestion control (and
   roughly modem data rates), it is necessary for a transport protocol
   to have AIMD or rate-based congestion control (TFRC).  As discussed
   in <a href="#section-8.5">Section 8.5</a>, rate-based congestion control is not suitable for
   mid-sized transfers and is not any simpler than AIMD.  Further, since
   hosts may have heterogeneous network connectivity, a transport
   protocol needs to provide flow control.  Moreover, it may not be easy
   to validate a new transport protocol that only provides selective TCP
   semantics.

<span class="h3"><a name="section-8.3">8.3</a>.  TCP-like mechanism within an application layer protocol</span>

   In this approach, key TCP mechanisms such as reliability, congestion
   control, and flow control are designed as part of the application
   layer protocol.  This approach has several disadvantages.  First,
   every application layer protocol that is unable to establish TCP
   connections in the presence of NAT and firewalls but may use UDP will
   need to invent its own reliable, congestion control and flow control
   transport protocol.  Second, it is non-trivial to get the first
   implementations of a conceptually new protocol right.  Third, any new
   transport protocol, even if it is specified within an application
   layer protocol must undergo a large validation effort.  Finally, most
   long-term successful protocols are those that provide modular
   functionality, and not extremely narrowly-tailored protocols.

<span class="h3"><a name="section-8.4">8.4</a>.  Tunneling</span>

   Another design option is to provide a VPN-like tunnel for sending and
   receiving TCP packets over UDP.  The idea is to use tunneling
   solutions between hosts so that hosts can use the kernel TCP stack
   and unmodified socket functions calls.

   This approach is not desirable for several reasons.  First, tunneling
   solutions typically require support from kernel or require kernel
   upgrades to work.  Requiring kernel upgrades to work is not plausible
   for an application that is trying to get deployment traction.
   Second, establishing a tunnel typically requires root access to the
   system and it is unrealistic for user-space applications to require
   root access for proper functioning.  Third, peer-to-peer
   applications, which are expected to use ToU, establish a large number



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009               [Page 11]</span>
</pre><pre class="newpage"><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   of connections with other hosts.  Even, if a tunneling solution does
   not require any kernel support, such a solution consumes significant
   bandwidth and CPU resources to maintain a large number of tunnels
   with other hosts.  Popular P2P applications such as Skype and
   Bittorrent do not take advantage of a layer-3 tunneling solution.

<span class="h3"><a name="section-8.5">8.5</a>.  TFRC</span>

   TFRC [<a href="http://tools.ietf.org/html/rfc5348" title="&quot;TCP Friendly Rate Control (TFRC): Protocol Specification&quot;">RFC5348</a>] is a congestion control mechanism (not a protocol)
   that is designed for long-lived media streams.  Its main benefit is
   of smoothing rates to these media streams.  It does not provide any
   packet formats, reliability, or flow control.  It's congestion
   control mechanism is not suited for exchanging data objects that
   range from a few dozen to a few hundred packets.  The reason is that
   TFRC is based on estimating loss rates within 8 loss intervals.  With
   a loss rate of 1%, this translates, very roughly, into 800 packets or
   roughly 800 kB, before a reliable estimate of a better (higher) rate
   is computed.  Further, its main benefit, smoothing rates, is of no
   importance to applications desiring to replicate TCP functionality
   over UDP.

<span class="h3"><a name="section-8.6">8.6</a>.  SCTP</span>

   SCTP [<a href="http://tools.ietf.org/html/rfc4960" title="&quot;Stream Control Transmission Protocol&quot;">RFC4960</a>] is significantly more complicated than TCP in its
   implementation and its performance is generally the same, except in
   circumstances involving head-of-line blocking.  Further, SCTP will
   have trouble getting traction in the consumer and enterprise Internet
   space unless it (also) runs over UDP, as there seem to be few NATs
   that know how to handle SCTP and thus it is effectively unusable by a
   fair fraction of the Internet user population.

<span class="h3"><a name="section-8.7">8.7</a>.  Criticism</span>

   A criticism of the ToU approach is that it is deceptively simple to
   describe but difficult to implement and is likely to suffer from
   broken implementations.  We think that this assertion is not valid
   for three reasons.  First, ToU does not define a new congestion
   control protocol and thus stays away from all the validation issues
   associated with a new congestion control protocol.  Second, a
   reasonable implementation approach is to first implement connection
   management and AIMD congestion control and test it with regular TCP
   to determine if the implemented congestion control mechanisms are
   broken.  This implementation can be followed by implementing TCP
   options such as window scaling and SACK.  Third, ToU like other
   protocols such as SIP will be implemented as a module or library and
   is likely to mature over time.





<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009               [Page 12]</span>
</pre><pre class="newpage"><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


<span class="h2"><a name="section-9">9</a>.  Acknowledgements</span>

   The draft incorporates comments from the discussion on TSVWG and
   P2PSIP mailing list.  We also acknowledge an earlier draft by R.
   Denis-Courmont on UDP transports.


<span class="h2"><a name="section-10">10</a>.  IANA Considerations</span>

   TBD.


<span class="h2"><a name="section-11">11</a>.  Security Considerations</span>

   ToU is subject to the same security considerations as TCP.


<span class="h2"><a name="section-12">12</a>.  References</span>

<span class="h3"><a name="section-12.1">12.1</a>.  Normative References</span>

   [<a name="ref-I-D.ietf-tcpm-rfc2581bis" id="ref-I-D.ietf-tcpm-rfc2581bis">I-D.ietf-tcpm-rfc2581bis</a>]
              Paxson, V., Blanton, E., and M. Allman, "TCP Congestion
              Control", <a href="http://tools.ietf.org/html/draft-ietf-tcpm-rfc2581bis-05">draft-ietf-tcpm-rfc2581bis-05</a> (work in
              progress), May 2009.

   [<a name="ref-I-D.ietf-tcpm-tcp-auth-opt" id="ref-I-D.ietf-tcpm-tcp-auth-opt">I-D.ietf-tcpm-tcp-auth-opt</a>]
              Touch, J., Mankin, A., and R. Bonica, "The TCP
              Authentication Option", <a href="http://tools.ietf.org/html/draft-ietf-tcpm-tcp-auth-opt-04">draft-ietf-tcpm-tcp-auth-opt-04</a>
              (work in progress), March 2009.

   [<a name="ref-RFC0793" id="ref-RFC0793">RFC0793</a>]  Postel, J., "Transmission Control Protocol", STD 7,
              <a href="http://tools.ietf.org/html/rfc793">RFC 793</a>, September 1981.

   [<a name="ref-RFC0854" id="ref-RFC0854">RFC0854</a>]  Postel, J. and J. Reynolds, "Telnet Protocol
              Specification", STD 8, <a href="http://tools.ietf.org/html/rfc854">RFC 854</a>, May 1983.

   [<a name="ref-RFC1122" id="ref-RFC1122">RFC1122</a>]  Braden, R., "Requirements for Internet Hosts -
              Communication Layers", STD 3, <a href="http://tools.ietf.org/html/rfc1122">RFC 1122</a>, October 1989.

   [<a name="ref-RFC1323" id="ref-RFC1323">RFC1323</a>]  Jacobson, V., Braden, B., and D. Borman, "TCP Extensions
              for High Performance", <a href="http://tools.ietf.org/html/rfc1323">RFC 1323</a>, May 1992.

   [<a name="ref-RFC2018" id="ref-RFC2018">RFC2018</a>]  Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, "TCP
              Selective Acknowledgment Options", <a href="http://tools.ietf.org/html/rfc2018">RFC 2018</a>, October 1996.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="http://tools.ietf.org/html/bcp14">BCP 14</a>, <a href="http://tools.ietf.org/html/rfc2119">RFC 2119</a>, March 1997.



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009               [Page 13]</span>
</pre><pre class="newpage"><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


   [<a name="ref-RFC3168" id="ref-RFC3168">RFC3168</a>]  Ramakrishnan, K., Floyd, S., and D. Black, "The Addition
              of Explicit Congestion Notification (ECN) to IP",
              <a href="http://tools.ietf.org/html/rfc3168">RFC 3168</a>, September 2001.

   [<a name="ref-RFC3390" id="ref-RFC3390">RFC3390</a>]  Allman, M., Floyd, S., and C. Partridge, "Increasing TCP's
              Initial Window", <a href="http://tools.ietf.org/html/rfc3390">RFC 3390</a>, October 2002.

   [<a name="ref-RFC4347" id="ref-RFC4347">RFC4347</a>]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security", <a href="http://tools.ietf.org/html/rfc4347">RFC 4347</a>, April 2006.

   [<a name="ref-RFC4821" id="ref-RFC4821">RFC4821</a>]  Mathis, M. and J. Heffner, "Packetization Layer Path MTU
              Discovery", <a href="http://tools.ietf.org/html/rfc4821">RFC 4821</a>, March 2007.

   [<a name="ref-RFC4960" id="ref-RFC4960">RFC4960</a>]  Stewart, R., "Stream Control Transmission Protocol",
              <a href="http://tools.ietf.org/html/rfc4960">RFC 4960</a>, September 2007.

   [<a name="ref-RFC5246" id="ref-RFC5246">RFC5246</a>]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", <a href="http://tools.ietf.org/html/rfc5246">RFC 5246</a>, August 2008.

   [<a name="ref-RFC5348" id="ref-RFC5348">RFC5348</a>]  Floyd, S., Handley, M., Padhye, J., and J. Widmer, "TCP
              Friendly Rate Control (TFRC): Protocol Specification",
              <a href="http://tools.ietf.org/html/rfc5348">RFC 5348</a>, September 2008.

   [<a name="ref-RFC5389" id="ref-RFC5389">RFC5389</a>]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,
              "Session Traversal Utilities for NAT (STUN)", <a href="http://tools.ietf.org/html/rfc5389">RFC 5389</a>,
              October 2008.

<span class="h3"><a name="section-12.2">12.2</a>.  Informative References</span>

   [<a name="ref-Daytona" id="ref-Daytona">Daytona</a>]  Pradhan, P., Kandula, S., Xu, W., Sheikh, A., and E.
              Nahum, "Daytona : A User-Level TCP Stack", 2004,
              &lt;<a href="http://nms.lcs.mit.edu/%7Ekandula/data/daytona.pdf">http://nms.lcs.mit.edu/~kandula/data/daytona.pdf</a>&gt;.

   [<a name="ref-I-D.ietf-behave-nat-behavior-discovery" id="ref-I-D.ietf-behave-nat-behavior-discovery">I-D.ietf-behave-nat-behavior-discovery</a>]
              MacDonald, D. and B. Lowekamp, "NAT Behavior Discovery
              Using STUN", <a href="http://tools.ietf.org/html/draft-ietf-behave-nat-behavior-discovery-06">draft-ietf-behave-nat-behavior-discovery-06</a>
              (work in progress), March 2009.

   [<a name="ref-I-D.ietf-mmusic-ice" id="ref-I-D.ietf-mmusic-ice">I-D.ietf-mmusic-ice</a>]
              Rosenberg, J., "Interactive Connectivity Establishment
              (ICE): A Protocol for Network Address  Translator (NAT)
              Traversal for Offer/Answer Protocols",
              <a href="http://tools.ietf.org/html/draft-ietf-mmusic-ice-19">draft-ietf-mmusic-ice-19</a> (work in progress), October 2007.

   [<a name="ref-I-D.ietf-mmusic-ice-tcp" id="ref-I-D.ietf-mmusic-ice-tcp">I-D.ietf-mmusic-ice-tcp</a>]
              Rosenberg, J., "TCP Candidates with Interactive
              Connectivity Establishment (ICE)",
              <a href="http://tools.ietf.org/html/draft-ietf-mmusic-ice-tcp-07">draft-ietf-mmusic-ice-tcp-07</a> (work in progress),



<span class="grey">Baset &amp; Schulzrinne     Expires December 9, 2009               [Page 14]</span>
</pre><pre class="newpage"><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft                TCP-over-UDP                     June 2009</span>


              July 2008.

   [<a name="ref-MINET" id="ref-MINET">MINET</a>]    Dinda, P., "The Minet TCP/IP Stack", 2002, &lt;<a href="http://cs.northwestern.edu/%7Epdinda/minet/NWU-CS-02-08.pdf">http://</a>
              <a href="http://cs.northwestern.edu/%7Epdinda/minet/NWU-CS-02-08.pdf">cs.northwestern.edu/~pdinda/minet/NWU-CS-02-08.pdf</a>&gt;.

   [<a name="ref-atou" id="ref-atou">atou</a>]     Dunigan, T. and F. Fowler, "A TCP-over-UDP Test Harness",
              2002, &lt;<a href="http://www.csm.ornl.gov/%7Edunigan/atou.ps">http://www.csm.ornl.gov/~dunigan/atou.ps</a>&gt;.


<span class="h2"><a name="appendix-A">Appendix A</a>.  Change Log</span>

<span class="h1"><a name="appendix-A.1">A.1</a>.  Changes since <a href="http://tools.ietf.org/html/draft-baset-tsvwg-tcp-over-udp-00">draft-baset-tsvwg-tcp-over-udp-00</a></span>

   o  Updated introduction to reflect that it is difficult for two hosts
      behind two different NATs to establish a TCP connection.

   o  Added PSH bit.

   o  Added MTU discovery to model of operation section.

   o  Added text on ECN to congestion control section.

   o  Added a section on NAT related issues.

   o  Updated text in design alternatives section.


Authors' Addresses

   Salman A. Baset
   Columbia University
   1214 Amsterdam Avenue
   New York, NY
   USA

   Email: salman@cs.columbia.edu


   Henning Schulzrinne
   Columbia University
   1214 Amsterdam Avenue
   New York, NY
   USA

   Email: hgs@cs.columbia.edu






Baset &amp; Schulzrinne     Expires December 9, 2009               [Page 15]
</pre><pre class="newpage">

</pre><br>
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.91, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>